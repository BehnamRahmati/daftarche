generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String    @default("/user-placeholder.png")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isOnline   Boolean   @default(false) // Tracks if user is currently online
  lastActive DateTime? // Tracks the last time the user was active
 
  // relations
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  conversations ConversationParticipant[]
  clipboard     Clipboard[]
  contacts      Contact[]                 @relation("UserOwnedContacts")
  inContacts    Contact[]                 @relation("UserInOtherContacts")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Clipboard {
  id      String @id @default(uuid())
  content String
  user    User   @relation(fields: [userid], references: [id])
  userid  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  received  Boolean  @default(false) // Indicates if the message was received
  read      Boolean  @default(false) // Indicates if the message was read
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  // Add constraints
  @@unique([conversationId, userId])
}

model Contact {
  id        String @id @default(uuid())
  ownerId   String // The user who owns the contact list
  owner     User   @relation("UserOwnedContacts", fields: [ownerId], references: [id])
  contactId String // The user who is a contact
  contact   User   @relation("UserInOtherContacts", fields: [contactId], references: [id])

  createdAt DateTime @default(now())

  @@unique([ownerId, contactId]) // Avoid duplicate contacts
}
