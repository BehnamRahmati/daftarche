generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Clipboard     Clipboard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages      Message[]
  conversations ConversationParticipant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Clipboard {
  id      String @id @default(uuid())
  content String
  user    User   @relation(fields: [userid], references: [id])
  userid  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String   @id @default(uuid())
  content       String
  createdAt     DateTime @default(now())
  senderId      String
  sender        User      @relation(fields: [senderId], references: [id])
  conversationId String
  conversation  Conversation @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())

  // Relations
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             String @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  user           User @relation(fields: [userId], references: [id])

  // Add constraints
  @@unique([conversationId, userId])
}